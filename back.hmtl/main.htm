<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Lector de CÃ³digos de Barra</title>
<style>
  :root {
    --bg: #0f172a;        /* slate-900 */
    --panel: #111827;     /* gray-900 */
    --muted: #9ca3af;     /* gray-400 */
    --text: #e5e7eb;      /* gray-200 */
    --accent: #22c55e;    /* green-500 */
    --accent-2: #60a5fa;  /* blue-400 */
    --danger: #ef4444;    /* red-500 */
    --ring: rgba(96,165,250,.35);
    --radius: 16px;
  }
  * { box-sizing: border-box }
  html, body { height: 100% }
  body {
    margin: 0; background: radial-gradient(1200px 800px at 20% 0%, #111827 0%, #0b1020 45%, #05070f 100%), var(--bg);
    color: var(--text); font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji";
    display: grid; place-items: start center; padding: 24px;
  }
  .app {
    width: min(1100px, 100%);
    display: grid; gap: 16px;
    grid-template-columns: 1.2fr .8fr;
  }
  @media (max-width: 900px) { .app { grid-template-columns: 1fr } }
  .card {
    background: linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.01));
    border: 1px solid rgba(255,255,255,.08);
    border-radius: var(--radius);
    box-shadow: 0 10px 30px rgba(0,0,0,.35);
    overflow: clip;
  }
  .card-header { padding: 16px 18px; border-bottom: 1px solid rgba(255,255,255,.08); display:flex; align-items:center; gap:10px }
  .title { font-size: 18px; font-weight: 700; letter-spacing:.2px }
  .subtle { color: var(--muted); font-size: 13px }
  .controls { padding: 14px 18px; display:flex; flex-wrap: wrap; gap: 10px }
  .controls .group { display:flex; gap:10px; align-items:center }
  select, button, input[type="file"]::file-selector-button {
    background: #0b1224; border: 1px solid rgba(255,255,255,.15);
    color: var(--text); padding: 10px 12px; border-radius: 10px; font-size: 14px;
    outline: none;
  }
  button {
    cursor: pointer; border: 1px solid rgba(255,255,255,.12);
    transition: transform .04s ease, box-shadow .2s ease, border-color .2s ease, background .2s ease;
  }
  button.primary { background: linear-gradient(180deg, #1e293b, #0f172a); border-color: rgba(96,165,250,.35) }
  button.primary:active { transform: translateY(1px) }
  button.success { border-color: rgba(34,197,94,.35) }
  button.danger { border-color: rgba(239,68,68,.35) }
  button:focus-visible { box-shadow: 0 0 0 4px var(--ring) }
  .video-wrap { position: relative; aspect-ratio: 16/10; background:#000; }
  video, canvas.overlay {
    position:absolute; inset:0; width:100%; height:100%; object-fit:cover; border-bottom: 1px solid rgba(255,255,255,.08);
  }
  .badges {
    position:absolute; left:10px; bottom:10px; display:flex; gap:8px; flex-wrap:wrap;
  }
  .badge {
    background: rgba(15,23,42,.75); border: 1px solid rgba(255,255,255,.15);
    color: var(--text); padding: 6px 10px; border-radius: 999px; font-size:12px; backdrop-filter: blur(6px);
  }
  .right { padding: 10px }
  .list { max-height: 420px; overflow: auto; display: grid; gap: 10px; padding: 12px 14px }
  .item {
    background: rgba(2,6,23,.6); border: 1px solid rgba(255,255,255,.08);
    border-radius: 12px; padding: 12px; display: grid; gap: 6px;
  }
  .code { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; font-size: 14px; background: rgba(0,0,0,.35); padding: 6px 8px; border-radius: 8px; word-break: break-all }
  .row { display:flex; align-items:center; justify-content: space-between; gap: 12px; }
  .row .meta { display:flex; gap:8px; font-size:12px; color: var(--muted) }
  .actions { display:flex; gap:8px }
  .footer { padding: 10px 14px; border-top: 1px solid rgba(255,255,255,.08); display:flex; align-items:center; justify-content: space-between; gap:10px; flex-wrap:wrap }
  .hint { color: var(--muted); font-size: 12px }
  .hidden { display:none }
  .file { display:flex; align-items:center; gap:8px }
  .switch { display:inline-flex; align-items:center; gap:8px; font-size: 14px; color: var(--text) }
  .switch input { width: 42px; height: 24px; accent-color: var(--accent) }
  .error { color: #fecaca }
</style>
</head>
<body>
  <div class="app">
    <!-- Lado izquierdo: cÃ¡mara / lectura -->
    <section class="card">
      <div class="card-header">
        <div class="title">Lector de CÃ³digos</div>
        <div class="subtle">EAN, Code-128, QR y mÃ¡s (si el navegador lo soporta)</div>
      </div>

      <div class="controls">
        <div class="group">
          <label for="cameraSelect" class="subtle">CÃ¡mara:</label>
          <select id="cameraSelect"></select>
        </div>
        <div class="group">
          <button id="btnStart" class="primary">â–¶ Iniciar</button>
          <button id="btnStop" class="danger" disabled>â–  Detener</button>
        </div>
        <div class="group">
          <label class="switch">
            <input type="checkbox" id="toggleTorch" />
            Linterna
          </label>
        </div>
        <div class="group file">
          <input type="file" id="fileInput" accept="image/*" />
          <span class="subtle">o carga una imagenâ€¦</span>
        </div>
      </div>

      <div class="video-wrap">
        <video id="video" playsinline muted></video>
        <canvas class="overlay" id="overlay"></canvas>
        <div class="badges">
          <div class="badge" id="apiBadge">API: <strong>desconocido</strong></div>
          <div class="badge">FPS: <span id="fps">0</span></div>
          <div class="badge">Ãšltimo: <span id="lastType">â€”</span></div>
        </div>
      </div>

      <div class="footer">
        <div class="hint">
          Consejo: en mÃ³viles, prueba la cÃ¡mara trasera. Requiere HTTPS o localhost.
          <span id="compat" class="error"></span>
        </div>
        <div class="actions">
          <button id="btnClear" class="">ðŸ§¹ Limpiar</button>
          <button id="btnCopyAll" class="success">ðŸ“‹ Copiar todo</button>
        </div>
      </div>
    </section>

    <!-- Lado derecho: resultados -->
    <aside class="card right">
      <div class="card-header">
        <div class="title">Resultados</div>
        <div class="subtle" id="count">0 encontrados</div>
      </div>
      <div class="list" id="results"></div>
    </aside>
  </div>

  <audio id="beep" preload="auto">
    <source src="data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEAESsAACJWAAACABYAZGF0YQAAAAAA" type="audio/wav">
  </audio>

<script>
(() => {
  const hasBarcodeAPI = 'BarcodeDetector' in window;
  const supportedFormatsDefault = [
    'aztec','code_128','code_39','code_93','codabar',
    'data_matrix','ean_13','ean_8','itf','pdf417',
    'qr_code','upc_a','upc_e'
  ];

  const els = {
    video: document.getElementById('video'),
    overlay: document.getElementById('overlay'),
    cameraSelect: document.getElementById('cameraSelect'),
    btnStart: document.getElementById('btnStart'),
    btnStop: document.getElementById('btnStop'),
    btnClear: document.getElementById('btnClear'),
    btnCopyAll: document.getElementById('btnCopyAll'),
    toggleTorch: document.getElementById('toggleTorch'),
    fileInput: document.getElementById('fileInput'),
    results: document.getElementById('results'),
    count: document.getElementById('count'),
    apiBadge: document.getElementById('apiBadge'),
    fps: document.getElementById('fps'),
    lastType: document.getElementById('lastType'),
    beep: document.getElementById('beep'),
    compat: document.getElementById('compat')
  };

  let detector = null;
  let stream = null;
  let track = null;
  let running = false;
  let lastTime = performance.now();
  let frames = 0;
  let fps = 0;
  const seen = new Set();

  const ctx = els.overlay.getContext('2d');

  function setBadge() {
    if (hasBarcodeAPI) {
      window.BarcodeDetector.getSupportedFormats?.().then(list => {
        const sup = (list && list.length ? list : supportedFormatsDefault).join(', ');
        els.apiBadge.innerHTML = `API: <strong>nativa</strong> Â· <span class="subtle">Formatos: ${sup}</span>`;
      }).catch(() => {
        els.apiBadge.innerHTML = `API: <strong>nativa</strong>`;
      });
    } else {
      els.apiBadge.innerHTML = `API: <strong>no disponible</strong>`;
      els.compat.textContent = ' Tu navegador no soporta BarcodeDetector. Puedes cargar imÃ¡genes o usar otro navegador.';
    }
  }

  async function enumerateCameras() {
    const devices = await navigator.mediaDevices.enumerateDevices();
    const videos = devices.filter(d => d.kind === 'videoinput');
    els.cameraSelect.innerHTML = '';
    videos.forEach((d, i) => {
      const opt = document.createElement('option');
      opt.value = d.deviceId;
      opt.textContent = d.label || `CÃ¡mara ${i+1}`;
      els.cameraSelect.appendChild(opt);
    });
    if (!videos.length) {
      const opt = document.createElement('option');
      opt.textContent = 'No hay cÃ¡maras';
      els.cameraSelect.appendChild(opt);
    }
  }

  async function start() {
    if (running) return;
    try {
      // Preferir trasera si estÃ¡ disponible
      const constraints = {
        audio: false,
        video: {
          deviceId: els.cameraSelect.value ? { exact: els.cameraSelect.value } : undefined,
          facingMode: 'environment',
          width: { ideal: 1280 }, height: { ideal: 720 }
        }
      };
      stream = await navigator.mediaDevices.getUserMedia(constraints);
      els.video.srcObject = stream;
      track = stream.getVideoTracks()[0];

      await els.video.play();
      resizeCanvas();
      running = true;
      els.btnStart.disabled = true;
      els.btnStop.disabled = false;

      if (hasBarcodeAPI) {
        const formats = await window.BarcodeDetector.getSupportedFormats?.()
          .catch(() => supportedFormatsDefault) || supportedFormatsDefault;
        detector = new window.BarcodeDetector({ formats });
      } else {
        detector = null;
      }

      requestAnimationFrame(loop);
      tryToggleTorch(true); // intenta prender la linterna si estaba activada
    } catch (err) {
      console.error(err);
      alert('No se pudo iniciar la cÃ¡mara: ' + (err.message || err));
    }
  }

  function stop() {
    running = false;
    els.btnStart.disabled = false;
    els.btnStop.disabled = true;
    if (track) { track.stop(); track = null; }
    if (stream) {
      stream.getTracks().forEach(t => t.stop());
      stream = null;
    }
    clearOverlay();
  }

  function resizeCanvas() {
    const rect = els.video.getBoundingClientRect();
    els.overlay.width = rect.width * devicePixelRatio;
    els.overlay.height = rect.height * devicePixelRatio;
  }
  window.addEventListener('resize', resizeCanvas);

  function clearOverlay() {
    ctx.clearRect(0, 0, els.overlay.width, els.overlay.height);
  }

  function drawBoxes(barcodes) {
    clearOverlay();
    ctx.lineWidth = 3 * devicePixelRatio;
    ctx.strokeStyle = 'rgba(96,165,250,0.95)';
    ctx.fillStyle = 'rgba(96,165,250,0.15)';
    for (const b of barcodes) {
      if (!b.boundingBox) continue;
      // boundingBox estÃ¡ en CSS px del video; ajustamos a canvas esc.
      const vw = els.video.videoWidth, vh = els.video.videoHeight;
      const cw = els.overlay.width, ch = els.overlay.height;
      // Mapeo simple: como usamos object-fit:cover, estimamos escalas:
      const vidRatio = vw / vh;
      const box = b.boundingBox;

      // Calculamos draw area del video en el canvas
      const canvasRatio = cw / ch;
      let drawW, drawH, offsetX=0, offsetY=0;
      if (vidRatio > canvasRatio) {
        // video mÃ¡s ancho que canvas: altura encaja
        drawH = ch; drawW = ch * vidRatio; offsetX = (cw - drawW) / 2;
      } else {
        drawW = cw; drawH = cw / vidRatio; offsetY = (ch - drawH) / 2;
      }
      const scaleX = drawW / vw; const scaleY = drawH / vh;

      const x = offsetX + box.x * scaleX;
      const y = offsetY + box.y * scaleY;
      const w = box.width * scaleX;
      const h = box.height * scaleY;

      ctx.strokeRect(x, y, w, h);
      // etiqueta
      const label = b.format?.toUpperCase() || 'CODE';
      ctx.fillRect(x, y - 28, ctx.measureText(label).width + 24, 24);
      ctx.fillStyle = '#0b1224';
      ctx.font = `${14 * devicePixelRatio}px ui-monospace, SFMono-Regular, Menlo, Consolas, monospace`;
      ctx.fillText(label, x + 8, y - 10);
      ctx.fillStyle = 'rgba(96,165,250,0.15)';
    }
  }

  async function loop(now) {
    if (!running) return;
    // FPS
    frames++;
    if (now - lastTime >= 1000) {
      fps = frames; frames = 0; lastTime = now;
      els.fps.textContent = String(fps);
    }

    if (detector) {
      try {
        const barcodes = await detector.detect(els.video);
        if (barcodes.length) {
          drawBoxes(barcodes);
          for (const b of barcodes) onDetect(b);
        } else {
          clearOverlay();
        }
      } catch (err) {
        console.warn('Detector error:', err);
      }
    }
    requestAnimationFrame(loop);
  }

  function onDetect(b) {
    const raw = (b.rawValue || '').trim();
    if (!raw || seen.has(raw)) return;
    seen.add(raw);
    // beep
    try { els.beep.currentTime = 0; els.beep.play().catch(()=>{}); } catch {}
    els.lastType.textContent = b.format || 'â€”';
    addResult({
      value: raw,
      format: b.format || 'desconocido',
      ts: new Date()
    });
  }

  function addResult({ value, format, ts }) {
    const div = document.createElement('div');
    div.className = 'item';

    const code = document.createElement('div');
    code.className = 'code';
    code.textContent = value;

    const row = document.createElement('div');
    row.className = 'row';

    const meta = document.createElement('div');
    meta.className = 'meta';
    const d = new Intl.DateTimeFormat('es-MX', { dateStyle: 'short', timeStyle: 'medium' }).format(ts);
    meta.innerHTML = `<span>Formato: <strong>${format}</strong></span><span>${d}</span>`;

    const actions = document.createElement('div');
    actions.className = 'actions';

    const copy = document.createElement('button');
    copy.textContent = 'ðŸ“‹ Copiar';
    copy.onclick = async () => {
      await navigator.clipboard.writeText(value);
      copy.textContent = 'âœ… Copiado';
      setTimeout(()=> copy.textContent='ðŸ“‹ Copiar', 1200);
    };

    const remove = document.createElement('button');
    remove.textContent = 'âœ– Quitar';
    remove.classList.add('danger');
    remove.onclick = () => {
      seen.delete(value);
      div.remove();
      updateCount();
    };

    actions.appendChild(copy);
    actions.appendChild(remove);

    row.appendChild(meta);
    row.appendChild(actions);

    div.appendChild(code);
    div.appendChild(row);
    els.results.prepend(div);
    updateCount();
  }

  function updateCount() {
    els.count.textContent = `${els.results.children.length} encontrados`;
  }

  async function tryToggleTorch(respectSwitch=false) {
    // Requiere ImageCapture o applyConstraints con torch (soporte variable)
    if (!track) return;
    const want = respectSwitch ? els.toggleTorch.checked : els.toggleTorch.checked;
    try {
      await track.applyConstraints({ advanced: [{ torch: want }] });
    } catch {
      // algunos navegadores no soportan torch; ocultamos el switch si falla la primera vez
      if (!respectSwitch) {
        document.querySelector('.switch')?.classList.add('hidden');
      }
    }
  }

  // Leer desde imagen
  els.fileInput.addEventListener('change', async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    if (!hasBarcodeAPI) {
      alert('Tu navegador no soporta la lectura nativa. Prueba en Chrome/Edge recientes o usa la cÃ¡mara.');
      return;
    }
    const img = new Image();
    img.onload = async () => {
      try {
        const d = await detector.detect(img);
        if (d.length) {
          for (const b of d) onDetect(b);
        } else {
          alert('No se detectaron cÃ³digos en la imagen.');
        }
      } catch (err) {
        alert('Error al analizar la imagen: ' + (err.message || err));
      }
    };
    img.src = URL.createObjectURL(file);
  });

  // Botones
  els.btnStart.addEventListener('click', start);
  els.btnStop.addEventListener('click', stop);
  els.btnClear.addEventListener('click', () => {
    seen.clear();
    els.results.innerHTML = '';
    updateCount();
  });
  els.btnCopyAll.addEventListener('click', async () => {
    const all = Array.from(els.results.querySelectorAll('.code')).map(x => x.textContent).join('\n');
    if (!all) return;
    await navigator.clipboard.writeText(all);
    els.btnCopyAll.textContent = 'âœ… Copiado';
    setTimeout(()=> els.btnCopyAll.textContent='ðŸ“‹ Copiar todo', 1200);
  });
  els.toggleTorch.addEventListener('change', () => tryToggleTorch(true));

  // InicializaciÃ³n
  (async function init() {
    setBadge();
    if (!navigator.mediaDevices?.getUserMedia) {
      alert('Este navegador no soporta cÃ¡mara (getUserMedia).');
      return;
    }
    // solicite permiso una vez para listar cÃ¡maras con etiqueta
    try {
      const tmp = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
      tmp.getTracks().forEach(t => t.stop());
    } catch {}
    await enumerateCameras();
  })();
})();
</script>
</body>
</html>
